package service;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import java.util.PriorityQueue;

import model.Product;

import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import controller.APIListener;
import controller.APIPriority;
import controller.AppListener;
import controller.InternetTask;
import controller.NetworkListener;
import controller.UploadStatus;

import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.os.Binder;
import android.os.Handler;
import android.os.IBinder;
import android.os.StrictMode;
import android.util.Base64;
import android.util.Log;

public class APIService extends Service {
	private String url = "https://api.bukalapak.com/v1/";
	static String userid;
	static String token;
	private final IBinder mBinder = new MyBinder();
	private PriorityQueue<InternetTask> taskQueue;
	private UploadStatus uploadStatus = UploadStatus.IDLE;
	private int continueHoldCount;
	Handler handler;
	Runnable r;

	@Override
	public void onCreate() {
		super.onCreate();
		taskQueue = new PriorityQueue<InternetTask>();
	}

	public int onStartCommand(Intent intent, int flags, int startId) {
		return startId;
	}

	private void addTask(InternetTask task) {
		this.taskQueue.add(task);
		if (uploadStatus != UploadStatus.BUSY)
			continueRemainingTask();
	}

	private void continueRemainingTask() {
		new PostData().execute();
	}

	private HttpPost post(String user, String pass, String suburl)
			throws Exception {
		HttpPost result = new HttpPost(url + suburl);
		result.setHeader("Authorization", getB64Auth(user, pass));
		return result;
	}

	private HttpPost postWithJSON(String user, String pass, String suburl,
			JSONObject json) throws Exception {
		HttpPost result = new HttpPost(url + suburl);
		result.setHeader("Authorization", getB64Auth(user, pass));
		return result;
	}

	private HttpPost postWithImage(String user, String pass, String suburl,
			Bitmap image) throws Exception {
		HttpPost result = new HttpPost(url + suburl);
		result.setHeader("Authorization", getB64Auth(user, pass));
		return result;
	}

	private HttpGet get(String user, String pass, String suburl)
			throws Exception {
		HttpGet result = new HttpGet(url + suburl);
		result.setHeader("Authorization", getB64Auth(user, pass));
		return result;
	}

	private HttpPut put(String user, String pass, String suburl)
			throws Exception {
		HttpPut result = new HttpPut(url + suburl);
		result.setHeader("Authorization", getB64Auth(user, pass));
		return result;
	}

	public boolean isActive() {
		return (userid != null && token != null);
	}

	// /////////////////////////////AUTHENTICATION API//////////////////////
	// ///LOGIN//////

	// ///LOGOUT/////
	public void retrieveNewAccess(String user, String pwd, APIListener l)
			throws Exception {
		HttpUriRequest req = post(user, pwd, "authenticate.json");
		final InternetTask task = new InternetTask(req, APIPriority.AUTH_ACTION);
		task.setNetworkListener(new NetworkListener() {
			@Override
			public void onFinish(JSONObject res) {
				String status = null;
				try {
					status = res.getString("status");
					if (status.equals("OK")) {
						userid = res.getString("user_id");
						token = res.getString("token");
						task.tellResult(null, null);
					} else {
						task.tellResult(res.getString("message"),
								new Exception(res.getString("message")));
					}
				} catch (JSONException e) {
					task.tellResult("Error! We are in maintenance.", e);
					Log.e("error", e.getMessage());
				}
			}
		});
		task.setAPIListener(l);
		addTask(task);
	}

	public void removeRecentAccess() {
		this.userid = null;
		this.token = null;
		taskQueue.clear();
	}

	// ///////////////////////////PRODUCT API//////////////////////////////////
	public void listLapak(final APIListener l, boolean available, boolean sold)
			throws Exception {
		String params = "";
		if (available && sold)
			params += "?available=true&sold=true";
		else if (available)
			params += "?available=true";
		else if (sold)
			params += "?sold=true";
		HttpUriRequest req = get(userid, token, "products/mylapak.json"
				+ params);
		final InternetTask task = new InternetTask(req,
				APIPriority.UPLOAD_IMAGE_ACTION);
		task.setAPIListener(l);
		task.setNetworkListener(new NetworkListener() {

			@Override
			public void onFinish(JSONObject res) {
				// TODO Auto-generated method stub
				ArrayList<Product> result = new ArrayList<Product>();
				try {
					if (res.getString("status").equals("OK")) {
						JSONArray products = res.getJSONArray("products");
						for (int ii = 0; ii < products.length(); ii++) {
							JSONObject p = products.getJSONObject(ii);
							String id = p.getString("id");
							Product product = new Product(id);
							product.setName(p.getString("name"));
							product.setPrice(Integer.parseInt(p
									.getString("price")));
							result.add(product);
						}
						task.tellResult(result, null);
					} else {
						task.tellResult(null,
								new Exception(res.getString("message")));
					}
				} catch (NumberFormatException e) {
					// TODO Auto-generated catch block
					task.tellResult("Error! We are in maintenance.", e);
					Log.e("error", e.getMessage());
				} catch (JSONException e) {
					// TODO Auto-generated catch block
					task.tellResult("Error! We are in maintenance.", e);
					Log.e("error", e.getMessage());
				}
			}
		});
		addTask(task);
	}

	// public List<Product> listProducts(String query, int page, int perpage)
	// throws Exception
	// {
	// String params = "?page="+page+"&per_page="+perpage;
	// if(query!=null&&!query.isEmpty()) params+="&query="+query;
	// JSONObject response = requestGet(userid, token,null,
	// "products.json"+params);
	// Log.e("Jumlah anak response", response.length()+"");
	// Log.e("Jumlah name response", response.names().length()+"");
	// String message = response.getString("message");
	// Log.e("Jumlah anak message", message+"");
	// return null;
	// }

	private String parse(InputStream is) {
		BufferedReader reader = null;
		try {
			reader = new BufferedReader(
					new InputStreamReader(is, "iso-8859-1"), 8);
		} catch (UnsupportedEncodingException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		StringBuilder sb = new StringBuilder();
		String line = null;
		try {
			while ((line = reader.readLine()) != null) {
				sb.append(line);
			}
			is.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String response = sb.toString();
		return response;
	}

	private String getB64Auth(String login, String pass) {
		String source = login + ":" + pass;
		String ret = "Basic "
				+ Base64.encodeToString(source.getBytes(), Base64.URL_SAFE
						| Base64.NO_WRAP);
		return ret;
	}

	@Override
	public IBinder onBind(Intent arg0) {
		// TODO Auto-generated method stub
		return mBinder;
	}

	public class MyBinder extends Binder {
		public APIService getService() {
			return APIService.this;
		}
	}

	class PostData extends AsyncTask<String, String, JSONObject> {
		InternetTask task = null;

		@Override
		protected void onPreExecute() {
			// TODO Auto-generated method stub
			super.onPreExecute();
			if (!taskQueue.isEmpty()) {
				task = taskQueue.peek();
				ConnectivityManager conMgr = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
				NetworkInfo i = conMgr.getActiveNetworkInfo();
				if (i == null) {
					uploadStatus = UploadStatus.ONHOLD;
					task.tellHold();
				} else if (i.isConnected()) {
					uploadStatus = UploadStatus.IDLE;
					task.tellStart();
				} else if (i.isAvailable()) {
					uploadStatus = UploadStatus.ONHOLD;
					task.tellHold();
				}
			}
		}

		@Override
		protected JSONObject doInBackground(String... arg0) {
			// TODO Auto-generated method stub
			if (task != null && uploadStatus == UploadStatus.IDLE) {
				uploadStatus = UploadStatus.BUSY;
				task.setAppListener(new AppListener() {
					@Override
					public void onCancel() {
						taskQueue.remove(this);
					}
				});
				continueHoldCount = 0;
				DefaultHttpClient httpclient = new DefaultHttpClient();
				HttpResponse response = null;
				try {
					response = httpclient.execute(task.getRequest());
					String temp = parse(response.getEntity().getContent());
					JSONObject result = new JSONObject(temp);
					return result;
				} catch (ClientProtocolException e) {
					uploadStatus = UploadStatus.ONHOLD;
					Log.e("Error API", e.getMessage());
				} catch (IOException e) {
					uploadStatus = UploadStatus.ONHOLD;
					Log.e("Error API", e.getMessage());
				} catch (JSONException e) {
					uploadStatus = UploadStatus.ONHOLD;
					Log.e("Error API", e.getMessage());
				}
			}
			return null;
		}

		@Override
		protected void onPostExecute(JSONObject result) {
			// TODO Auto-generated method stub
			super.onPostExecute(result);
			if (result != null) {
				task.tellFinish(result);
				taskQueue.poll();
				uploadStatus = UploadStatus.IDLE;
			} else {
				if (uploadStatus == UploadStatus.ONHOLD)
					task.tellHold();
			}
			if (!taskQueue.isEmpty() && uploadStatus == UploadStatus.IDLE) {
				new PostData().execute();
			}
		}

	}/*

	public class NetworkStateReceiver extends BroadcastReceiver {
		public NetworkStateReceiver(){}
		@Override
		public void onReceive(Context context, Intent intent) {
			Log.d("app", "Network connectivity change");
			if (intent.getExtras() != null) {
				NetworkInfo ni = (NetworkInfo) intent.getExtras().get(
						ConnectivityManager.EXTRA_NETWORK_INFO);
				if (ni != null && ni.getState() == NetworkInfo.State.CONNECTED) {
					Log.i("app", "Network " + ni.getTypeName() + " connected");
					continueRemainingTask();
				}
			}
		}
	}*/

}
